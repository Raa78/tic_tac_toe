'use strict';

let players = ["x", "o"];

let activePlayer = 0;

let playingBoard = [];

let winning–°ombinations = [];

let numberCells = null;


/**
 * –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 * –û–±–Ω—É–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–π - –ø–æ–ª–µ, –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
 * –°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ - –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤.
 * –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é renderBoard –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
 */
function startGame() {
  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ, –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏, –∏–≥—Ä—É –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç 1–π –∏–≥—Ä–æ–∫('–•')
  playingBoard = [];
  winning–°ombinations = [];
  activePlayer = 0;

  // –≠—Ç–æ –∑–∞–¥–µ–ª, —á—Ç–æ –±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª-–≤–æ —è—á–µ–µ–∫ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ –¢–ó
  // numberCells = prompt("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –æ—Ç 3 –∏ –±–æ–ª–µ–µ:");

  numberCells = checkNumberCellsPerRow(numberCells);

  let line = Array(numberCells).fill("");

  // –î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥—É–ª—å –∏–∑ —è–∑—ã–∫–∞ C++ :)
  for (let c = 0; c < numberCells; c++) {
    playingBoard.push(line.slice());
  }

  renderBoard(playingBoard);
  console.log('–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø–æ–ª–µ=>', playingBoard);

  renderWinning–°ombinations(numberCells);
  console.log('–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏=>', winning–°ombinations);
}


/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
 * @param {number} number
 */
function checkNumberCellsPerRow(number) {
  if (isNaN(number)) return 3;

  number = +number < 3 ? 3 : +number;

  return number;
}


/**
 * –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
 * @param {number} number - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ –∏ —Å—Ç–æ–ª–±—Ü–µ
 */
function renderWinning–°ombinations(number) {
  let storage = [];

  let flatPlayingBoard = playingBoard.slice().flat();

  // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  flatPlayingBoard.forEach((item, index) => {
    storage.push(index);

    if (storage.length === number) {
      winning–°ombinations.push(storage);
      storage = [];
    }
  });

  // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  let sliceWinning–°ombinations = winning–°ombinations.slice();

  for (let index = 0; index < sliceWinning–°ombinations.slice().length; index++) {
    sliceWinning–°ombinations.forEach(el => {
      storage.push(el[index]);
    });

    winning–°ombinations.push(storage);
    storage = [];
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å –ª–µ–≤–∞ –Ω–∞ –ø—Ä–∞–≤–æ
  for (let index = 0; index < flatPlayingBoard.length; index += number + 1) {
    storage.push(index);
  }

  winning–°ombinations.push(storage);
  storage = [];

  // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Å –ø—Ä–∞–≤–æ –Ω–∞ –ª–µ–≤–æ
  for (let index = number - 1; index < flatPlayingBoard.length - 1; index += number - 1) {
    storage.push(index);
  }

  winning–°ombinations.push(storage);
  storage = [];
}


/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–æ–¥—ã –Ω–∞ –ø–æ–ª–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
 * @param {number} line - —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ø–æ–ª–µ
 * @param {number} column - —Å—Ç–æ–ª–±–µ—Ü –Ω–∞ –ø–æ–ª–µ
 */
function click(line, column) {
  playingBoard[line][column] = players[activePlayer];

  renderBoard(playingBoard);

  let chekWin = checkWinner(players[activePlayer]);

  if (chekWin) {
    showWinner(activePlayer);
  }

  // –î–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∏—á—å—é –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø–æ–¥–æ–±–∏—é fn showWinner()
  if (!playingBoard.flat().includes('')) {
    showDraw();
  }

  activePlayer = activePlayer === 0 ? 1 : 0;
}


/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–æ–¥—ã –Ω–∞ –ø–æ–ª–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
 * @param {number} player - –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
 * @returns {boolean}
 */
function checkWinner(player) {
  let filled–°ells = [];

  playingBoard.flat().forEach((item, index) => {
    if (item === player) {
      filled–°ells.push(index);
    }
  });

  for (let elWinningCombination of winning–°ombinations) {
    let numberMatches = 0;

    elWinningCombination.forEach(num => {
      if (filled–°ells.includes(num)) numberMatches++;

      if (numberMatches === 0) return false;
    });

    if (numberMatches === numberCells) return true;
  }

  return false;
}


/**
 * –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –Ω–∏—á—å—è
 */
function showDraw() {
  let header = modalEl.getElementsByTagName('h2')[0];

  header.textContent = `ü§ù –ù–∏—á—å—è! ü§ù`;

  modalEl.classList.remove('hidden');
}
